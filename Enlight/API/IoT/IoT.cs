// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: IoT.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SKF.Enlight.API.IoT {

  /// <summary>Holder for reflection information generated from IoT.proto</summary>
  public static partial class IoTReflection {

    #region Descriptor
    /// <summary>File descriptor for IoT.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IoTReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglJb1QucHJvdG8SCmlvdGdycGNhcGkilAIKD1Rhc2tEZXNjcmlwdGlvbhIP",
            "Cgd1c2VyX2lkGAEgASgJEg8KB3Rhc2tfaWQYAiABKAkSEQoJdGFza19uYW1l",
            "GAMgASgJEhQKDGhpZXJhcmNoeV9pZBgEIAEoCRIaChJkdWVfZGF0ZV90aW1l",
            "c3RhbXAYBSABKAMSFAoMaXNfY29tcGxldGVkGAYgASgIEkIKF2Z1bmN0aW9u",
            "YWxfbG9jYXRpb25faWRzGAcgASgLMiEuaW90Z3JwY2FwaS5GdW5jdGlvbmFs",
            "TG9jYXRpb25JZHMSJgoGc3RhdHVzGAggASgOMhYuaW90Z3JwY2FwaS5UYXNr",
            "U3RhdHVzEhgKEGV4dGVybmFsX3Rhc2tfaWQYCSABKAki9AEKFkluaXRpYWxU",
            "YXNrRGVzY3JpcHRpb24SDwoHdXNlcl9pZBgBIAEoCRIRCgl0YXNrX25hbWUY",
            "AiABKAkSFAoMaGllcmFyY2h5X2lkGAMgASgJEhoKEmR1ZV9kYXRlX3RpbWVz",
            "dGFtcBgEIAEoAxJCChdmdW5jdGlvbmFsX2xvY2F0aW9uX2lkcxgFIAEoCzIh",
            "LmlvdGdycGNhcGkuRnVuY3Rpb25hbExvY2F0aW9uSWRzEhgKEGV4dGVybmFs",
            "X3Rhc2tfaWQYBiABKAkSJgoGc3RhdHVzGAcgASgOMhYuaW90Z3JwY2FwaS5U",
            "YXNrU3RhdHVzIiwKCFRhc2tVc2VyEg8KB3VzZXJfaWQYASABKAkSDwoHdGFz",
            "a19pZBgCIAEoCSJeChJTZXRUYXNrU3RhdHVzSW5wdXQSDwoHdGFza19pZBgB",
            "IAEoCRImCgZzdGF0dXMYAiABKA4yFi5pb3RncnBjYXBpLlRhc2tTdGF0dXMS",
            "DwoHdXNlcl9pZBgDIAEoCSJNChBUYXNrRGVzY3JpcHRpb25zEjkKFHRhc2tf",
            "ZGVzY3JpcHRpb25fYXJyGAEgAygLMhsuaW90Z3JwY2FwaS5UYXNrRGVzY3Jp",
            "cHRpb24iJwoVRnVuY3Rpb25hbExvY2F0aW9uSWRzEg4KBmlkX2FychgBIAMo",
            "CSIgCg9QcmltaXRpdmVTdHJpbmcSDQoFdmFsdWUYASABKAkiHgoNUHJpbWl0",
            "aXZlQm9vbBINCgV2YWx1ZRgBIAEoCCIPCg1QcmltaXRpdmVWb2lkIowCCghO",
            "b2RlRGF0YRISCgpjcmVhdGVkX2F0GAEgASgDEjUKDGNvbnRlbnRfdHlwZRgC",
            "IAEoDjIfLmlvdGdycGNhcGkuTm9kZURhdGFDb250ZW50VHlwZRIpCgpkYXRh",
            "X3BvaW50GAMgASgLMhUuaW90Z3JwY2FwaS5EYXRhUG9pbnQSJgoIc3BlY3Ry",
            "dW0YBCABKAsyFC5pb3RncnBjYXBpLlNwZWN0cnVtEisKC3RpbWVfc2VyaWVz",
            "GAUgASgLMhYuaW90Z3JwY2FwaS5UaW1lU2VyaWVzEgwKBG5vdGUYBiABKAkS",
            "DQoFbWVkaWEYByABKAwSGAoQcXVlc3Rpb25fYW5zd2VycxgIIAMoCSIiCgpD",
            "b29yZGluYXRlEgkKAXgYASABKAESCQoBeRgCIAEoASJXCglEYXRhUG9pbnQS",
            "KgoKY29vcmRpbmF0ZRgBIAEoCzIWLmlvdGdycGNhcGkuQ29vcmRpbmF0ZRIO",
            "CgZ4X3VuaXQYAiABKAkSDgoGeV91bml0GAMgASgJIoMBCghTcGVjdHJ1bRIr",
            "Cgtjb29yZGluYXRlcxgBIAMoCzIWLmlvdGdycGNhcGkuQ29vcmRpbmF0ZRIO",
            "CgZ4X3VuaXQYAiABKAkSDgoGeV91bml0GAMgASgJEhcKD3dpbmRvd19mdW5j",
            "dGlvbhgEIAEoCRIRCglzcGVlZF9ycG0YBSABKAEiWQoKVGltZVNlcmllcxIr",
            "Cgtjb29yZGluYXRlcxgBIAMoCzIWLmlvdGdycGNhcGkuQ29vcmRpbmF0ZRIO",
            "CgZ4X3VuaXQYAiABKAkSDgoGeV91bml0GAMgASgJIk8KE0luZ2VzdE5vZGVE",
            "YXRhSW5wdXQSDwoHbm9kZV9pZBgBIAEoCRInCglub2RlX2RhdGEYAiABKAsy",
            "FC5pb3RncnBjYXBpLk5vZGVEYXRhIhYKFEluZ2VzdE5vZGVEYXRhT3V0cHV0",
            "IloKGUluZ2VzdE5vZGVEYXRhU3RyZWFtSW5wdXQSDwoHbm9kZV9pZBgBIAEo",
            "CRIsCg5ub2RlX2RhdGFfbGlzdBgCIAMoCzIULmlvdGdycGNhcGkuTm9kZURh",
            "dGEiHAoaSW5nZXN0Tm9kZURhdGFTdHJlYW1PdXRwdXQibQoQR2V0Tm9kZURh",
            "dGFJbnB1dBIPCgdub2RlX2lkGAEgASgJEhEKCXRpbWVzdGFtcBgCIAEoAxI1",
            "Cgxjb250ZW50X3R5cGUYAyABKA4yHy5pb3RncnBjYXBpLk5vZGVEYXRhQ29u",
            "dGVudFR5cGUiQQoRR2V0Tm9kZURhdGFPdXRwdXQSLAoObm9kZV9kYXRhX2xp",
            "c3QYASADKAsyFC5pb3RncnBjYXBpLk5vZGVEYXRhIhgKFkdldE5vZGVEYXRh",
            "U3RyZWFtSW5wdXQiUwoXR2V0Tm9kZURhdGFTdHJlYW1PdXRwdXQSDwoHbm9k",
            "ZV9pZBgBIAEoCRInCglub2RlX2RhdGEYAiABKAsyFC5pb3RncnBjYXBpLk5v",
            "ZGVEYXRhIioKEkdldFRhc2tTdHJlYW1JbnB1dBIUCgxoaWVyYXJjaHlfaWQY",
            "ASABKAkiQAoTR2V0VGFza1N0cmVhbU91dHB1dBIpCgR0YXNrGAEgASgLMhsu",
            "aW90Z3JwY2FwaS5UYXNrRGVzY3JpcHRpb24qQQoKVGFza1N0YXR1cxIMCghO",
            "T1RfU0VOVBAAEggKBFNFTlQQARIMCghSRUNFSVZFRBACEg0KCUNPTVBMRVRF",
            "RBADKnwKE05vZGVEYXRhQ29udGVudFR5cGUSCwoHREVGQVVMVBAAEg4KCkRB",
            "VEFfUE9JTlQQARIMCghTUEVDVFJVTRACEg8KC1RJTUVfU0VSSUVTEAMSCAoE",
            "Tk9URRAEEgkKBU1FRElBEAUSFAoQUVVFU1RJT05fQU5TV0VSUxAGMrkICgNJ",
            "b1QSRAoIRGVlcFBpbmcSGS5pb3RncnBjYXBpLlByaW1pdGl2ZVZvaWQaGy5p",
            "b3RncnBjYXBpLlByaW1pdGl2ZVN0cmluZyIAEk8KCkNyZWF0ZVRhc2sSIi5p",
            "b3RncnBjYXBpLkluaXRpYWxUYXNrRGVzY3JpcHRpb24aGy5pb3RncnBjYXBp",
            "LlByaW1pdGl2ZVN0cmluZyIAEkoKC0dldEFsbFRhc2tzEhsuaW90Z3JwY2Fw",
            "aS5QcmltaXRpdmVTdHJpbmcaHC5pb3RncnBjYXBpLlRhc2tEZXNjcmlwdGlv",
            "bnMiABJSChNHZXRVbmNvbXBsZXRlZFRhc2tzEhsuaW90Z3JwY2FwaS5Qcmlt",
            "aXRpdmVTdHJpbmcaHC5pb3RncnBjYXBpLlRhc2tEZXNjcmlwdGlvbnMiABJF",
            "ChBTZXRUYXNrQ29tcGxldGVkEhQuaW90Z3JwY2FwaS5UYXNrVXNlchoZLmlv",
            "dGdycGNhcGkuUHJpbWl0aXZlVm9pZCIAEj8KCkRlbGV0ZVRhc2sSFC5pb3Rn",
            "cnBjYXBpLlRhc2tVc2VyGhkuaW90Z3JwY2FwaS5QcmltaXRpdmVWb2lkIgAS",
            "XQoeR2V0VW5jb21wbGV0ZWRUYXNrc0J5SGllcmFyY2h5EhsuaW90Z3JwY2Fw",
            "aS5QcmltaXRpdmVTdHJpbmcaHC5pb3RncnBjYXBpLlRhc2tEZXNjcmlwdGlv",
            "bnMiABJMCg1TZXRUYXNrU3RhdHVzEh4uaW90Z3JwY2FwaS5TZXRUYXNrU3Rh",
            "dHVzSW5wdXQaGS5pb3RncnBjYXBpLlByaW1pdGl2ZVZvaWQiABJUCg1HZXRU",
            "YXNrU3RyZWFtEh4uaW90Z3JwY2FwaS5HZXRUYXNrU3RyZWFtSW5wdXQaHy5p",
            "b3RncnBjYXBpLkdldFRhc2tTdHJlYW1PdXRwdXQiADABElUKDkluZ2VzdE5v",
            "ZGVEYXRhEh8uaW90Z3JwY2FwaS5Jbmdlc3ROb2RlRGF0YUlucHV0GiAuaW90",
            "Z3JwY2FwaS5Jbmdlc3ROb2RlRGF0YU91dHB1dCIAEmkKFEluZ2VzdE5vZGVE",
            "YXRhU3RyZWFtEiUuaW90Z3JwY2FwaS5Jbmdlc3ROb2RlRGF0YVN0cmVhbUlu",
            "cHV0GiYuaW90Z3JwY2FwaS5Jbmdlc3ROb2RlRGF0YVN0cmVhbU91dHB1dCIA",
            "KAESTAoLR2V0Tm9kZURhdGESHC5pb3RncnBjYXBpLkdldE5vZGVEYXRhSW5w",
            "dXQaHS5pb3RncnBjYXBpLkdldE5vZGVEYXRhT3V0cHV0IgASYAoRR2V0Tm9k",
            "ZURhdGFTdHJlYW0SIi5pb3RncnBjYXBpLkdldE5vZGVEYXRhU3RyZWFtSW5w",
            "dXQaIy5pb3RncnBjYXBpLkdldE5vZGVEYXRhU3RyZWFtT3V0cHV0IgAwAUIW",
            "qgITU0tGLkVubGlnaHQuQVBJLklvVGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SKF.Enlight.API.IoT.TaskStatus), typeof(global::SKF.Enlight.API.IoT.NodeDataContentType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.TaskDescription), global::SKF.Enlight.API.IoT.TaskDescription.Parser, new[]{ "UserId", "TaskId", "TaskName", "HierarchyId", "DueDateTimestamp", "IsCompleted", "FunctionalLocationIds", "Status", "ExternalTaskId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.InitialTaskDescription), global::SKF.Enlight.API.IoT.InitialTaskDescription.Parser, new[]{ "UserId", "TaskName", "HierarchyId", "DueDateTimestamp", "FunctionalLocationIds", "ExternalTaskId", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.TaskUser), global::SKF.Enlight.API.IoT.TaskUser.Parser, new[]{ "UserId", "TaskId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.SetTaskStatusInput), global::SKF.Enlight.API.IoT.SetTaskStatusInput.Parser, new[]{ "TaskId", "Status", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.TaskDescriptions), global::SKF.Enlight.API.IoT.TaskDescriptions.Parser, new[]{ "TaskDescriptionArr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.FunctionalLocationIds), global::SKF.Enlight.API.IoT.FunctionalLocationIds.Parser, new[]{ "IdArr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.PrimitiveString), global::SKF.Enlight.API.IoT.PrimitiveString.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.PrimitiveBool), global::SKF.Enlight.API.IoT.PrimitiveBool.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.PrimitiveVoid), global::SKF.Enlight.API.IoT.PrimitiveVoid.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.NodeData), global::SKF.Enlight.API.IoT.NodeData.Parser, new[]{ "CreatedAt", "ContentType", "DataPoint", "Spectrum", "TimeSeries", "Note", "Media", "QuestionAnswers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.Coordinate), global::SKF.Enlight.API.IoT.Coordinate.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.DataPoint), global::SKF.Enlight.API.IoT.DataPoint.Parser, new[]{ "Coordinate", "XUnit", "YUnit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.Spectrum), global::SKF.Enlight.API.IoT.Spectrum.Parser, new[]{ "Coordinates", "XUnit", "YUnit", "WindowFunction", "SpeedRpm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.TimeSeries), global::SKF.Enlight.API.IoT.TimeSeries.Parser, new[]{ "Coordinates", "XUnit", "YUnit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.IngestNodeDataInput), global::SKF.Enlight.API.IoT.IngestNodeDataInput.Parser, new[]{ "NodeId", "NodeData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.IngestNodeDataOutput), global::SKF.Enlight.API.IoT.IngestNodeDataOutput.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.IngestNodeDataStreamInput), global::SKF.Enlight.API.IoT.IngestNodeDataStreamInput.Parser, new[]{ "NodeId", "NodeDataList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.IngestNodeDataStreamOutput), global::SKF.Enlight.API.IoT.IngestNodeDataStreamOutput.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.GetNodeDataInput), global::SKF.Enlight.API.IoT.GetNodeDataInput.Parser, new[]{ "NodeId", "Timestamp", "ContentType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.GetNodeDataOutput), global::SKF.Enlight.API.IoT.GetNodeDataOutput.Parser, new[]{ "NodeDataList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.GetNodeDataStreamInput), global::SKF.Enlight.API.IoT.GetNodeDataStreamInput.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.GetNodeDataStreamOutput), global::SKF.Enlight.API.IoT.GetNodeDataStreamOutput.Parser, new[]{ "NodeId", "NodeData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.GetTaskStreamInput), global::SKF.Enlight.API.IoT.GetTaskStreamInput.Parser, new[]{ "HierarchyId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.IoT.GetTaskStreamOutput), global::SKF.Enlight.API.IoT.GetTaskStreamOutput.Parser, new[]{ "Task" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TaskStatus {
    [pbr::OriginalName("NOT_SENT")] NotSent = 0,
    [pbr::OriginalName("SENT")] Sent = 1,
    [pbr::OriginalName("RECEIVED")] Received = 2,
    [pbr::OriginalName("COMPLETED")] Completed = 3,
  }

  public enum NodeDataContentType {
    [pbr::OriginalName("DEFAULT")] Default = 0,
    [pbr::OriginalName("DATA_POINT")] DataPoint = 1,
    [pbr::OriginalName("SPECTRUM")] Spectrum = 2,
    [pbr::OriginalName("TIME_SERIES")] TimeSeries = 3,
    [pbr::OriginalName("NOTE")] Note = 4,
    [pbr::OriginalName("MEDIA")] Media = 5,
    [pbr::OriginalName("QUESTION_ANSWERS")] QuestionAnswers = 6,
  }

  #endregion

  #region Messages
  public sealed partial class TaskDescription : pb::IMessage<TaskDescription> {
    private static readonly pb::MessageParser<TaskDescription> _parser = new pb::MessageParser<TaskDescription>(() => new TaskDescription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskDescription(TaskDescription other) : this() {
      userId_ = other.userId_;
      taskId_ = other.taskId_;
      taskName_ = other.taskName_;
      hierarchyId_ = other.hierarchyId_;
      dueDateTimestamp_ = other.dueDateTimestamp_;
      isCompleted_ = other.isCompleted_;
      FunctionalLocationIds = other.functionalLocationIds_ != null ? other.FunctionalLocationIds.Clone() : null;
      status_ = other.status_;
      externalTaskId_ = other.externalTaskId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskDescription Clone() {
      return new TaskDescription(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "task_name" field.</summary>
    public const int TaskNameFieldNumber = 3;
    private string taskName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskName {
      get { return taskName_; }
      set {
        taskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hierarchy_id" field.</summary>
    public const int HierarchyIdFieldNumber = 4;
    private string hierarchyId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HierarchyId {
      get { return hierarchyId_; }
      set {
        hierarchyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "due_date_timestamp" field.</summary>
    public const int DueDateTimestampFieldNumber = 5;
    private long dueDateTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DueDateTimestamp {
      get { return dueDateTimestamp_; }
      set {
        dueDateTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "is_completed" field.</summary>
    public const int IsCompletedFieldNumber = 6;
    private bool isCompleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCompleted {
      get { return isCompleted_; }
      set {
        isCompleted_ = value;
      }
    }

    /// <summary>Field number for the "functional_location_ids" field.</summary>
    public const int FunctionalLocationIdsFieldNumber = 7;
    private global::SKF.Enlight.API.IoT.FunctionalLocationIds functionalLocationIds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.IoT.FunctionalLocationIds FunctionalLocationIds {
      get { return functionalLocationIds_; }
      set {
        functionalLocationIds_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 8;
    private global::SKF.Enlight.API.IoT.TaskStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.IoT.TaskStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "external_task_id" field.</summary>
    public const int ExternalTaskIdFieldNumber = 9;
    private string externalTaskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalTaskId {
      get { return externalTaskId_; }
      set {
        externalTaskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (TaskId != other.TaskId) return false;
      if (TaskName != other.TaskName) return false;
      if (HierarchyId != other.HierarchyId) return false;
      if (DueDateTimestamp != other.DueDateTimestamp) return false;
      if (IsCompleted != other.IsCompleted) return false;
      if (!object.Equals(FunctionalLocationIds, other.FunctionalLocationIds)) return false;
      if (Status != other.Status) return false;
      if (ExternalTaskId != other.ExternalTaskId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (TaskName.Length != 0) hash ^= TaskName.GetHashCode();
      if (HierarchyId.Length != 0) hash ^= HierarchyId.GetHashCode();
      if (DueDateTimestamp != 0L) hash ^= DueDateTimestamp.GetHashCode();
      if (IsCompleted != false) hash ^= IsCompleted.GetHashCode();
      if (functionalLocationIds_ != null) hash ^= FunctionalLocationIds.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (ExternalTaskId.Length != 0) hash ^= ExternalTaskId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (TaskId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TaskId);
      }
      if (TaskName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TaskName);
      }
      if (HierarchyId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HierarchyId);
      }
      if (DueDateTimestamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(DueDateTimestamp);
      }
      if (IsCompleted != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsCompleted);
      }
      if (functionalLocationIds_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(FunctionalLocationIds);
      }
      if (Status != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Status);
      }
      if (ExternalTaskId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ExternalTaskId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (TaskName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskName);
      }
      if (HierarchyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HierarchyId);
      }
      if (DueDateTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DueDateTimestamp);
      }
      if (IsCompleted != false) {
        size += 1 + 1;
      }
      if (functionalLocationIds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FunctionalLocationIds);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (ExternalTaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalTaskId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskDescription other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.TaskName.Length != 0) {
        TaskName = other.TaskName;
      }
      if (other.HierarchyId.Length != 0) {
        HierarchyId = other.HierarchyId;
      }
      if (other.DueDateTimestamp != 0L) {
        DueDateTimestamp = other.DueDateTimestamp;
      }
      if (other.IsCompleted != false) {
        IsCompleted = other.IsCompleted;
      }
      if (other.functionalLocationIds_ != null) {
        if (functionalLocationIds_ == null) {
          functionalLocationIds_ = new global::SKF.Enlight.API.IoT.FunctionalLocationIds();
        }
        FunctionalLocationIds.MergeFrom(other.FunctionalLocationIds);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.ExternalTaskId.Length != 0) {
        ExternalTaskId = other.ExternalTaskId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            TaskId = input.ReadString();
            break;
          }
          case 26: {
            TaskName = input.ReadString();
            break;
          }
          case 34: {
            HierarchyId = input.ReadString();
            break;
          }
          case 40: {
            DueDateTimestamp = input.ReadInt64();
            break;
          }
          case 48: {
            IsCompleted = input.ReadBool();
            break;
          }
          case 58: {
            if (functionalLocationIds_ == null) {
              functionalLocationIds_ = new global::SKF.Enlight.API.IoT.FunctionalLocationIds();
            }
            input.ReadMessage(functionalLocationIds_);
            break;
          }
          case 64: {
            status_ = (global::SKF.Enlight.API.IoT.TaskStatus) input.ReadEnum();
            break;
          }
          case 74: {
            ExternalTaskId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitialTaskDescription : pb::IMessage<InitialTaskDescription> {
    private static readonly pb::MessageParser<InitialTaskDescription> _parser = new pb::MessageParser<InitialTaskDescription>(() => new InitialTaskDescription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitialTaskDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialTaskDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialTaskDescription(InitialTaskDescription other) : this() {
      userId_ = other.userId_;
      taskName_ = other.taskName_;
      hierarchyId_ = other.hierarchyId_;
      dueDateTimestamp_ = other.dueDateTimestamp_;
      FunctionalLocationIds = other.functionalLocationIds_ != null ? other.FunctionalLocationIds.Clone() : null;
      externalTaskId_ = other.externalTaskId_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialTaskDescription Clone() {
      return new InitialTaskDescription(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "task_name" field.</summary>
    public const int TaskNameFieldNumber = 2;
    private string taskName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskName {
      get { return taskName_; }
      set {
        taskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hierarchy_id" field.</summary>
    public const int HierarchyIdFieldNumber = 3;
    private string hierarchyId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HierarchyId {
      get { return hierarchyId_; }
      set {
        hierarchyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "due_date_timestamp" field.</summary>
    public const int DueDateTimestampFieldNumber = 4;
    private long dueDateTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DueDateTimestamp {
      get { return dueDateTimestamp_; }
      set {
        dueDateTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "functional_location_ids" field.</summary>
    public const int FunctionalLocationIdsFieldNumber = 5;
    private global::SKF.Enlight.API.IoT.FunctionalLocationIds functionalLocationIds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.IoT.FunctionalLocationIds FunctionalLocationIds {
      get { return functionalLocationIds_; }
      set {
        functionalLocationIds_ = value;
      }
    }

    /// <summary>Field number for the "external_task_id" field.</summary>
    public const int ExternalTaskIdFieldNumber = 6;
    private string externalTaskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalTaskId {
      get { return externalTaskId_; }
      set {
        externalTaskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private global::SKF.Enlight.API.IoT.TaskStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.IoT.TaskStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitialTaskDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitialTaskDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (TaskName != other.TaskName) return false;
      if (HierarchyId != other.HierarchyId) return false;
      if (DueDateTimestamp != other.DueDateTimestamp) return false;
      if (!object.Equals(FunctionalLocationIds, other.FunctionalLocationIds)) return false;
      if (ExternalTaskId != other.ExternalTaskId) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (TaskName.Length != 0) hash ^= TaskName.GetHashCode();
      if (HierarchyId.Length != 0) hash ^= HierarchyId.GetHashCode();
      if (DueDateTimestamp != 0L) hash ^= DueDateTimestamp.GetHashCode();
      if (functionalLocationIds_ != null) hash ^= FunctionalLocationIds.GetHashCode();
      if (ExternalTaskId.Length != 0) hash ^= ExternalTaskId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (TaskName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TaskName);
      }
      if (HierarchyId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HierarchyId);
      }
      if (DueDateTimestamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(DueDateTimestamp);
      }
      if (functionalLocationIds_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(FunctionalLocationIds);
      }
      if (ExternalTaskId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ExternalTaskId);
      }
      if (Status != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (TaskName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskName);
      }
      if (HierarchyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HierarchyId);
      }
      if (DueDateTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DueDateTimestamp);
      }
      if (functionalLocationIds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FunctionalLocationIds);
      }
      if (ExternalTaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalTaskId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitialTaskDescription other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.TaskName.Length != 0) {
        TaskName = other.TaskName;
      }
      if (other.HierarchyId.Length != 0) {
        HierarchyId = other.HierarchyId;
      }
      if (other.DueDateTimestamp != 0L) {
        DueDateTimestamp = other.DueDateTimestamp;
      }
      if (other.functionalLocationIds_ != null) {
        if (functionalLocationIds_ == null) {
          functionalLocationIds_ = new global::SKF.Enlight.API.IoT.FunctionalLocationIds();
        }
        FunctionalLocationIds.MergeFrom(other.FunctionalLocationIds);
      }
      if (other.ExternalTaskId.Length != 0) {
        ExternalTaskId = other.ExternalTaskId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            TaskName = input.ReadString();
            break;
          }
          case 26: {
            HierarchyId = input.ReadString();
            break;
          }
          case 32: {
            DueDateTimestamp = input.ReadInt64();
            break;
          }
          case 42: {
            if (functionalLocationIds_ == null) {
              functionalLocationIds_ = new global::SKF.Enlight.API.IoT.FunctionalLocationIds();
            }
            input.ReadMessage(functionalLocationIds_);
            break;
          }
          case 50: {
            ExternalTaskId = input.ReadString();
            break;
          }
          case 56: {
            status_ = (global::SKF.Enlight.API.IoT.TaskStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskUser : pb::IMessage<TaskUser> {
    private static readonly pb::MessageParser<TaskUser> _parser = new pb::MessageParser<TaskUser>(() => new TaskUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskUser(TaskUser other) : this() {
      userId_ = other.userId_;
      taskId_ = other.taskId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskUser Clone() {
      return new TaskUser(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (TaskId != other.TaskId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (TaskId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TaskId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskUser other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            TaskId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetTaskStatusInput : pb::IMessage<SetTaskStatusInput> {
    private static readonly pb::MessageParser<SetTaskStatusInput> _parser = new pb::MessageParser<SetTaskStatusInput>(() => new SetTaskStatusInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetTaskStatusInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTaskStatusInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTaskStatusInput(SetTaskStatusInput other) : this() {
      taskId_ = other.taskId_;
      status_ = other.status_;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTaskStatusInput Clone() {
      return new SetTaskStatusInput(this);
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::SKF.Enlight.API.IoT.TaskStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.IoT.TaskStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 3;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetTaskStatusInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetTaskStatusInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (Status != other.Status) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetTaskStatusInput other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 16: {
            status_ = (global::SKF.Enlight.API.IoT.TaskStatus) input.ReadEnum();
            break;
          }
          case 26: {
            UserId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskDescriptions : pb::IMessage<TaskDescriptions> {
    private static readonly pb::MessageParser<TaskDescriptions> _parser = new pb::MessageParser<TaskDescriptions>(() => new TaskDescriptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskDescriptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskDescriptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskDescriptions(TaskDescriptions other) : this() {
      taskDescriptionArr_ = other.taskDescriptionArr_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskDescriptions Clone() {
      return new TaskDescriptions(this);
    }

    /// <summary>Field number for the "task_description_arr" field.</summary>
    public const int TaskDescriptionArrFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SKF.Enlight.API.IoT.TaskDescription> _repeated_taskDescriptionArr_codec
        = pb::FieldCodec.ForMessage(10, global::SKF.Enlight.API.IoT.TaskDescription.Parser);
    private readonly pbc::RepeatedField<global::SKF.Enlight.API.IoT.TaskDescription> taskDescriptionArr_ = new pbc::RepeatedField<global::SKF.Enlight.API.IoT.TaskDescription>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SKF.Enlight.API.IoT.TaskDescription> TaskDescriptionArr {
      get { return taskDescriptionArr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskDescriptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskDescriptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!taskDescriptionArr_.Equals(other.taskDescriptionArr_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= taskDescriptionArr_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      taskDescriptionArr_.WriteTo(output, _repeated_taskDescriptionArr_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += taskDescriptionArr_.CalculateSize(_repeated_taskDescriptionArr_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskDescriptions other) {
      if (other == null) {
        return;
      }
      taskDescriptionArr_.Add(other.taskDescriptionArr_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            taskDescriptionArr_.AddEntriesFrom(input, _repeated_taskDescriptionArr_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FunctionalLocationIds : pb::IMessage<FunctionalLocationIds> {
    private static readonly pb::MessageParser<FunctionalLocationIds> _parser = new pb::MessageParser<FunctionalLocationIds>(() => new FunctionalLocationIds());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FunctionalLocationIds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionalLocationIds() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionalLocationIds(FunctionalLocationIds other) : this() {
      idArr_ = other.idArr_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionalLocationIds Clone() {
      return new FunctionalLocationIds(this);
    }

    /// <summary>Field number for the "id_arr" field.</summary>
    public const int IdArrFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_idArr_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> idArr_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> IdArr {
      get { return idArr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FunctionalLocationIds);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FunctionalLocationIds other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!idArr_.Equals(other.idArr_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= idArr_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      idArr_.WriteTo(output, _repeated_idArr_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += idArr_.CalculateSize(_repeated_idArr_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FunctionalLocationIds other) {
      if (other == null) {
        return;
      }
      idArr_.Add(other.idArr_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            idArr_.AddEntriesFrom(input, _repeated_idArr_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PrimitiveString : pb::IMessage<PrimitiveString> {
    private static readonly pb::MessageParser<PrimitiveString> _parser = new pb::MessageParser<PrimitiveString>(() => new PrimitiveString());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrimitiveString> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveString() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveString(PrimitiveString other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveString Clone() {
      return new PrimitiveString(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrimitiveString);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrimitiveString other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrimitiveString other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PrimitiveBool : pb::IMessage<PrimitiveBool> {
    private static readonly pb::MessageParser<PrimitiveBool> _parser = new pb::MessageParser<PrimitiveBool>(() => new PrimitiveBool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrimitiveBool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveBool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveBool(PrimitiveBool other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveBool Clone() {
      return new PrimitiveBool(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private bool value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrimitiveBool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrimitiveBool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != false) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != false) {
        output.WriteRawTag(8);
        output.WriteBool(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrimitiveBool other) {
      if (other == null) {
        return;
      }
      if (other.Value != false) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PrimitiveVoid : pb::IMessage<PrimitiveVoid> {
    private static readonly pb::MessageParser<PrimitiveVoid> _parser = new pb::MessageParser<PrimitiveVoid>(() => new PrimitiveVoid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrimitiveVoid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveVoid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveVoid(PrimitiveVoid other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveVoid Clone() {
      return new PrimitiveVoid(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrimitiveVoid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrimitiveVoid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrimitiveVoid other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class NodeData : pb::IMessage<NodeData> {
    private static readonly pb::MessageParser<NodeData> _parser = new pb::MessageParser<NodeData>(() => new NodeData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeData(NodeData other) : this() {
      createdAt_ = other.createdAt_;
      contentType_ = other.contentType_;
      DataPoint = other.dataPoint_ != null ? other.DataPoint.Clone() : null;
      Spectrum = other.spectrum_ != null ? other.Spectrum.Clone() : null;
      TimeSeries = other.timeSeries_ != null ? other.TimeSeries.Clone() : null;
      note_ = other.note_;
      media_ = other.media_;
      questionAnswers_ = other.questionAnswers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeData Clone() {
      return new NodeData(this);
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 1;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "content_type" field.</summary>
    public const int ContentTypeFieldNumber = 2;
    private global::SKF.Enlight.API.IoT.NodeDataContentType contentType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.IoT.NodeDataContentType ContentType {
      get { return contentType_; }
      set {
        contentType_ = value;
      }
    }

    /// <summary>Field number for the "data_point" field.</summary>
    public const int DataPointFieldNumber = 3;
    private global::SKF.Enlight.API.IoT.DataPoint dataPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.IoT.DataPoint DataPoint {
      get { return dataPoint_; }
      set {
        dataPoint_ = value;
      }
    }

    /// <summary>Field number for the "spectrum" field.</summary>
    public const int SpectrumFieldNumber = 4;
    private global::SKF.Enlight.API.IoT.Spectrum spectrum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.IoT.Spectrum Spectrum {
      get { return spectrum_; }
      set {
        spectrum_ = value;
      }
    }

    /// <summary>Field number for the "time_series" field.</summary>
    public const int TimeSeriesFieldNumber = 5;
    private global::SKF.Enlight.API.IoT.TimeSeries timeSeries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.IoT.TimeSeries TimeSeries {
      get { return timeSeries_; }
      set {
        timeSeries_ = value;
      }
    }

    /// <summary>Field number for the "note" field.</summary>
    public const int NoteFieldNumber = 6;
    private string note_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Note {
      get { return note_; }
      set {
        note_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "media" field.</summary>
    public const int MediaFieldNumber = 7;
    private pb::ByteString media_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Media {
      get { return media_; }
      set {
        media_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "question_answers" field.</summary>
    public const int QuestionAnswersFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_questionAnswers_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> questionAnswers_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> QuestionAnswers {
      get { return questionAnswers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CreatedAt != other.CreatedAt) return false;
      if (ContentType != other.ContentType) return false;
      if (!object.Equals(DataPoint, other.DataPoint)) return false;
      if (!object.Equals(Spectrum, other.Spectrum)) return false;
      if (!object.Equals(TimeSeries, other.TimeSeries)) return false;
      if (Note != other.Note) return false;
      if (Media != other.Media) return false;
      if(!questionAnswers_.Equals(other.questionAnswers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (ContentType != 0) hash ^= ContentType.GetHashCode();
      if (dataPoint_ != null) hash ^= DataPoint.GetHashCode();
      if (spectrum_ != null) hash ^= Spectrum.GetHashCode();
      if (timeSeries_ != null) hash ^= TimeSeries.GetHashCode();
      if (Note.Length != 0) hash ^= Note.GetHashCode();
      if (Media.Length != 0) hash ^= Media.GetHashCode();
      hash ^= questionAnswers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CreatedAt != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CreatedAt);
      }
      if (ContentType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ContentType);
      }
      if (dataPoint_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DataPoint);
      }
      if (spectrum_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Spectrum);
      }
      if (timeSeries_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TimeSeries);
      }
      if (Note.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Note);
      }
      if (Media.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Media);
      }
      questionAnswers_.WriteTo(output, _repeated_questionAnswers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (ContentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ContentType);
      }
      if (dataPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataPoint);
      }
      if (spectrum_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spectrum);
      }
      if (timeSeries_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeSeries);
      }
      if (Note.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Note);
      }
      if (Media.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Media);
      }
      size += questionAnswers_.CalculateSize(_repeated_questionAnswers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeData other) {
      if (other == null) {
        return;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.ContentType != 0) {
        ContentType = other.ContentType;
      }
      if (other.dataPoint_ != null) {
        if (dataPoint_ == null) {
          dataPoint_ = new global::SKF.Enlight.API.IoT.DataPoint();
        }
        DataPoint.MergeFrom(other.DataPoint);
      }
      if (other.spectrum_ != null) {
        if (spectrum_ == null) {
          spectrum_ = new global::SKF.Enlight.API.IoT.Spectrum();
        }
        Spectrum.MergeFrom(other.Spectrum);
      }
      if (other.timeSeries_ != null) {
        if (timeSeries_ == null) {
          timeSeries_ = new global::SKF.Enlight.API.IoT.TimeSeries();
        }
        TimeSeries.MergeFrom(other.TimeSeries);
      }
      if (other.Note.Length != 0) {
        Note = other.Note;
      }
      if (other.Media.Length != 0) {
        Media = other.Media;
      }
      questionAnswers_.Add(other.questionAnswers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 16: {
            contentType_ = (global::SKF.Enlight.API.IoT.NodeDataContentType) input.ReadEnum();
            break;
          }
          case 26: {
            if (dataPoint_ == null) {
              dataPoint_ = new global::SKF.Enlight.API.IoT.DataPoint();
            }
            input.ReadMessage(dataPoint_);
            break;
          }
          case 34: {
            if (spectrum_ == null) {
              spectrum_ = new global::SKF.Enlight.API.IoT.Spectrum();
            }
            input.ReadMessage(spectrum_);
            break;
          }
          case 42: {
            if (timeSeries_ == null) {
              timeSeries_ = new global::SKF.Enlight.API.IoT.TimeSeries();
            }
            input.ReadMessage(timeSeries_);
            break;
          }
          case 50: {
            Note = input.ReadString();
            break;
          }
          case 58: {
            Media = input.ReadBytes();
            break;
          }
          case 66: {
            questionAnswers_.AddEntriesFrom(input, _repeated_questionAnswers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Coordinate : pb::IMessage<Coordinate> {
    private static readonly pb::MessageParser<Coordinate> _parser = new pb::MessageParser<Coordinate>(() => new Coordinate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Coordinate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coordinate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coordinate(Coordinate other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coordinate Clone() {
      return new Coordinate(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Coordinate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Coordinate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Coordinate other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataPoint : pb::IMessage<DataPoint> {
    private static readonly pb::MessageParser<DataPoint> _parser = new pb::MessageParser<DataPoint>(() => new DataPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPoint(DataPoint other) : this() {
      Coordinate = other.coordinate_ != null ? other.Coordinate.Clone() : null;
      xUnit_ = other.xUnit_;
      yUnit_ = other.yUnit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPoint Clone() {
      return new DataPoint(this);
    }

    /// <summary>Field number for the "coordinate" field.</summary>
    public const int CoordinateFieldNumber = 1;
    private global::SKF.Enlight.API.IoT.Coordinate coordinate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.IoT.Coordinate Coordinate {
      get { return coordinate_; }
      set {
        coordinate_ = value;
      }
    }

    /// <summary>Field number for the "x_unit" field.</summary>
    public const int XUnitFieldNumber = 2;
    private string xUnit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string XUnit {
      get { return xUnit_; }
      set {
        xUnit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "y_unit" field.</summary>
    public const int YUnitFieldNumber = 3;
    private string yUnit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string YUnit {
      get { return yUnit_; }
      set {
        yUnit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Coordinate, other.Coordinate)) return false;
      if (XUnit != other.XUnit) return false;
      if (YUnit != other.YUnit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (coordinate_ != null) hash ^= Coordinate.GetHashCode();
      if (XUnit.Length != 0) hash ^= XUnit.GetHashCode();
      if (YUnit.Length != 0) hash ^= YUnit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (coordinate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Coordinate);
      }
      if (XUnit.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(XUnit);
      }
      if (YUnit.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(YUnit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (coordinate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coordinate);
      }
      if (XUnit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(XUnit);
      }
      if (YUnit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(YUnit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataPoint other) {
      if (other == null) {
        return;
      }
      if (other.coordinate_ != null) {
        if (coordinate_ == null) {
          coordinate_ = new global::SKF.Enlight.API.IoT.Coordinate();
        }
        Coordinate.MergeFrom(other.Coordinate);
      }
      if (other.XUnit.Length != 0) {
        XUnit = other.XUnit;
      }
      if (other.YUnit.Length != 0) {
        YUnit = other.YUnit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (coordinate_ == null) {
              coordinate_ = new global::SKF.Enlight.API.IoT.Coordinate();
            }
            input.ReadMessage(coordinate_);
            break;
          }
          case 18: {
            XUnit = input.ReadString();
            break;
          }
          case 26: {
            YUnit = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Spectrum : pb::IMessage<Spectrum> {
    private static readonly pb::MessageParser<Spectrum> _parser = new pb::MessageParser<Spectrum>(() => new Spectrum());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Spectrum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spectrum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spectrum(Spectrum other) : this() {
      coordinates_ = other.coordinates_.Clone();
      xUnit_ = other.xUnit_;
      yUnit_ = other.yUnit_;
      windowFunction_ = other.windowFunction_;
      speedRpm_ = other.speedRpm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spectrum Clone() {
      return new Spectrum(this);
    }

    /// <summary>Field number for the "coordinates" field.</summary>
    public const int CoordinatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SKF.Enlight.API.IoT.Coordinate> _repeated_coordinates_codec
        = pb::FieldCodec.ForMessage(10, global::SKF.Enlight.API.IoT.Coordinate.Parser);
    private readonly pbc::RepeatedField<global::SKF.Enlight.API.IoT.Coordinate> coordinates_ = new pbc::RepeatedField<global::SKF.Enlight.API.IoT.Coordinate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SKF.Enlight.API.IoT.Coordinate> Coordinates {
      get { return coordinates_; }
    }

    /// <summary>Field number for the "x_unit" field.</summary>
    public const int XUnitFieldNumber = 2;
    private string xUnit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string XUnit {
      get { return xUnit_; }
      set {
        xUnit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "y_unit" field.</summary>
    public const int YUnitFieldNumber = 3;
    private string yUnit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string YUnit {
      get { return yUnit_; }
      set {
        yUnit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "window_function" field.</summary>
    public const int WindowFunctionFieldNumber = 4;
    private string windowFunction_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WindowFunction {
      get { return windowFunction_; }
      set {
        windowFunction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "speed_rpm" field.</summary>
    public const int SpeedRpmFieldNumber = 5;
    private double speedRpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedRpm {
      get { return speedRpm_; }
      set {
        speedRpm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Spectrum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Spectrum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!coordinates_.Equals(other.coordinates_)) return false;
      if (XUnit != other.XUnit) return false;
      if (YUnit != other.YUnit) return false;
      if (WindowFunction != other.WindowFunction) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SpeedRpm, other.SpeedRpm)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= coordinates_.GetHashCode();
      if (XUnit.Length != 0) hash ^= XUnit.GetHashCode();
      if (YUnit.Length != 0) hash ^= YUnit.GetHashCode();
      if (WindowFunction.Length != 0) hash ^= WindowFunction.GetHashCode();
      if (SpeedRpm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SpeedRpm);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      coordinates_.WriteTo(output, _repeated_coordinates_codec);
      if (XUnit.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(XUnit);
      }
      if (YUnit.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(YUnit);
      }
      if (WindowFunction.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WindowFunction);
      }
      if (SpeedRpm != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(SpeedRpm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += coordinates_.CalculateSize(_repeated_coordinates_codec);
      if (XUnit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(XUnit);
      }
      if (YUnit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(YUnit);
      }
      if (WindowFunction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WindowFunction);
      }
      if (SpeedRpm != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Spectrum other) {
      if (other == null) {
        return;
      }
      coordinates_.Add(other.coordinates_);
      if (other.XUnit.Length != 0) {
        XUnit = other.XUnit;
      }
      if (other.YUnit.Length != 0) {
        YUnit = other.YUnit;
      }
      if (other.WindowFunction.Length != 0) {
        WindowFunction = other.WindowFunction;
      }
      if (other.SpeedRpm != 0D) {
        SpeedRpm = other.SpeedRpm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            coordinates_.AddEntriesFrom(input, _repeated_coordinates_codec);
            break;
          }
          case 18: {
            XUnit = input.ReadString();
            break;
          }
          case 26: {
            YUnit = input.ReadString();
            break;
          }
          case 34: {
            WindowFunction = input.ReadString();
            break;
          }
          case 41: {
            SpeedRpm = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimeSeries : pb::IMessage<TimeSeries> {
    private static readonly pb::MessageParser<TimeSeries> _parser = new pb::MessageParser<TimeSeries>(() => new TimeSeries());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeSeries> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSeries() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSeries(TimeSeries other) : this() {
      coordinates_ = other.coordinates_.Clone();
      xUnit_ = other.xUnit_;
      yUnit_ = other.yUnit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSeries Clone() {
      return new TimeSeries(this);
    }

    /// <summary>Field number for the "coordinates" field.</summary>
    public const int CoordinatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SKF.Enlight.API.IoT.Coordinate> _repeated_coordinates_codec
        = pb::FieldCodec.ForMessage(10, global::SKF.Enlight.API.IoT.Coordinate.Parser);
    private readonly pbc::RepeatedField<global::SKF.Enlight.API.IoT.Coordinate> coordinates_ = new pbc::RepeatedField<global::SKF.Enlight.API.IoT.Coordinate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SKF.Enlight.API.IoT.Coordinate> Coordinates {
      get { return coordinates_; }
    }

    /// <summary>Field number for the "x_unit" field.</summary>
    public const int XUnitFieldNumber = 2;
    private string xUnit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string XUnit {
      get { return xUnit_; }
      set {
        xUnit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "y_unit" field.</summary>
    public const int YUnitFieldNumber = 3;
    private string yUnit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string YUnit {
      get { return yUnit_; }
      set {
        yUnit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeSeries);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeSeries other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!coordinates_.Equals(other.coordinates_)) return false;
      if (XUnit != other.XUnit) return false;
      if (YUnit != other.YUnit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= coordinates_.GetHashCode();
      if (XUnit.Length != 0) hash ^= XUnit.GetHashCode();
      if (YUnit.Length != 0) hash ^= YUnit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      coordinates_.WriteTo(output, _repeated_coordinates_codec);
      if (XUnit.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(XUnit);
      }
      if (YUnit.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(YUnit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += coordinates_.CalculateSize(_repeated_coordinates_codec);
      if (XUnit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(XUnit);
      }
      if (YUnit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(YUnit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeSeries other) {
      if (other == null) {
        return;
      }
      coordinates_.Add(other.coordinates_);
      if (other.XUnit.Length != 0) {
        XUnit = other.XUnit;
      }
      if (other.YUnit.Length != 0) {
        YUnit = other.YUnit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            coordinates_.AddEntriesFrom(input, _repeated_coordinates_codec);
            break;
          }
          case 18: {
            XUnit = input.ReadString();
            break;
          }
          case 26: {
            YUnit = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// IngestNodeData messages
  /// </summary>
  public sealed partial class IngestNodeDataInput : pb::IMessage<IngestNodeDataInput> {
    private static readonly pb::MessageParser<IngestNodeDataInput> _parser = new pb::MessageParser<IngestNodeDataInput>(() => new IngestNodeDataInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IngestNodeDataInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IngestNodeDataInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IngestNodeDataInput(IngestNodeDataInput other) : this() {
      nodeId_ = other.nodeId_;
      NodeData = other.nodeData_ != null ? other.NodeData.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IngestNodeDataInput Clone() {
      return new IngestNodeDataInput(this);
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private string nodeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_data" field.</summary>
    public const int NodeDataFieldNumber = 2;
    private global::SKF.Enlight.API.IoT.NodeData nodeData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.IoT.NodeData NodeData {
      get { return nodeData_; }
      set {
        nodeData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IngestNodeDataInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IngestNodeDataInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (!object.Equals(NodeData, other.NodeData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId.Length != 0) hash ^= NodeId.GetHashCode();
      if (nodeData_ != null) hash ^= NodeData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeId);
      }
      if (nodeData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NodeData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeId);
      }
      if (nodeData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IngestNodeDataInput other) {
      if (other == null) {
        return;
      }
      if (other.NodeId.Length != 0) {
        NodeId = other.NodeId;
      }
      if (other.nodeData_ != null) {
        if (nodeData_ == null) {
          nodeData_ = new global::SKF.Enlight.API.IoT.NodeData();
        }
        NodeData.MergeFrom(other.NodeData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeId = input.ReadString();
            break;
          }
          case 18: {
            if (nodeData_ == null) {
              nodeData_ = new global::SKF.Enlight.API.IoT.NodeData();
            }
            input.ReadMessage(nodeData_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IngestNodeDataOutput : pb::IMessage<IngestNodeDataOutput> {
    private static readonly pb::MessageParser<IngestNodeDataOutput> _parser = new pb::MessageParser<IngestNodeDataOutput>(() => new IngestNodeDataOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IngestNodeDataOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IngestNodeDataOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IngestNodeDataOutput(IngestNodeDataOutput other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IngestNodeDataOutput Clone() {
      return new IngestNodeDataOutput(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IngestNodeDataOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IngestNodeDataOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IngestNodeDataOutput other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// IngestNodeDataStream messages
  /// </summary>
  public sealed partial class IngestNodeDataStreamInput : pb::IMessage<IngestNodeDataStreamInput> {
    private static readonly pb::MessageParser<IngestNodeDataStreamInput> _parser = new pb::MessageParser<IngestNodeDataStreamInput>(() => new IngestNodeDataStreamInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IngestNodeDataStreamInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IngestNodeDataStreamInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IngestNodeDataStreamInput(IngestNodeDataStreamInput other) : this() {
      nodeId_ = other.nodeId_;
      nodeDataList_ = other.nodeDataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IngestNodeDataStreamInput Clone() {
      return new IngestNodeDataStreamInput(this);
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private string nodeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_data_list" field.</summary>
    public const int NodeDataListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SKF.Enlight.API.IoT.NodeData> _repeated_nodeDataList_codec
        = pb::FieldCodec.ForMessage(18, global::SKF.Enlight.API.IoT.NodeData.Parser);
    private readonly pbc::RepeatedField<global::SKF.Enlight.API.IoT.NodeData> nodeDataList_ = new pbc::RepeatedField<global::SKF.Enlight.API.IoT.NodeData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SKF.Enlight.API.IoT.NodeData> NodeDataList {
      get { return nodeDataList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IngestNodeDataStreamInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IngestNodeDataStreamInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if(!nodeDataList_.Equals(other.nodeDataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId.Length != 0) hash ^= NodeId.GetHashCode();
      hash ^= nodeDataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeId);
      }
      nodeDataList_.WriteTo(output, _repeated_nodeDataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeId);
      }
      size += nodeDataList_.CalculateSize(_repeated_nodeDataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IngestNodeDataStreamInput other) {
      if (other == null) {
        return;
      }
      if (other.NodeId.Length != 0) {
        NodeId = other.NodeId;
      }
      nodeDataList_.Add(other.nodeDataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeId = input.ReadString();
            break;
          }
          case 18: {
            nodeDataList_.AddEntriesFrom(input, _repeated_nodeDataList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IngestNodeDataStreamOutput : pb::IMessage<IngestNodeDataStreamOutput> {
    private static readonly pb::MessageParser<IngestNodeDataStreamOutput> _parser = new pb::MessageParser<IngestNodeDataStreamOutput>(() => new IngestNodeDataStreamOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IngestNodeDataStreamOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IngestNodeDataStreamOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IngestNodeDataStreamOutput(IngestNodeDataStreamOutput other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IngestNodeDataStreamOutput Clone() {
      return new IngestNodeDataStreamOutput(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IngestNodeDataStreamOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IngestNodeDataStreamOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IngestNodeDataStreamOutput other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// GetNodeData messages
  /// </summary>
  public sealed partial class GetNodeDataInput : pb::IMessage<GetNodeDataInput> {
    private static readonly pb::MessageParser<GetNodeDataInput> _parser = new pb::MessageParser<GetNodeDataInput>(() => new GetNodeDataInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNodeDataInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeDataInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeDataInput(GetNodeDataInput other) : this() {
      nodeId_ = other.nodeId_;
      timestamp_ = other.timestamp_;
      contentType_ = other.contentType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeDataInput Clone() {
      return new GetNodeDataInput(this);
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private string nodeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "content_type" field.</summary>
    public const int ContentTypeFieldNumber = 3;
    private global::SKF.Enlight.API.IoT.NodeDataContentType contentType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.IoT.NodeDataContentType ContentType {
      get { return contentType_; }
      set {
        contentType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNodeDataInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNodeDataInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (ContentType != other.ContentType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId.Length != 0) hash ^= NodeId.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (ContentType != 0) hash ^= ContentType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeId);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      if (ContentType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ContentType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeId);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (ContentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ContentType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNodeDataInput other) {
      if (other == null) {
        return;
      }
      if (other.NodeId.Length != 0) {
        NodeId = other.NodeId;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.ContentType != 0) {
        ContentType = other.ContentType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeId = input.ReadString();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 24: {
            contentType_ = (global::SKF.Enlight.API.IoT.NodeDataContentType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetNodeDataOutput : pb::IMessage<GetNodeDataOutput> {
    private static readonly pb::MessageParser<GetNodeDataOutput> _parser = new pb::MessageParser<GetNodeDataOutput>(() => new GetNodeDataOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNodeDataOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeDataOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeDataOutput(GetNodeDataOutput other) : this() {
      nodeDataList_ = other.nodeDataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeDataOutput Clone() {
      return new GetNodeDataOutput(this);
    }

    /// <summary>Field number for the "node_data_list" field.</summary>
    public const int NodeDataListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SKF.Enlight.API.IoT.NodeData> _repeated_nodeDataList_codec
        = pb::FieldCodec.ForMessage(10, global::SKF.Enlight.API.IoT.NodeData.Parser);
    private readonly pbc::RepeatedField<global::SKF.Enlight.API.IoT.NodeData> nodeDataList_ = new pbc::RepeatedField<global::SKF.Enlight.API.IoT.NodeData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SKF.Enlight.API.IoT.NodeData> NodeDataList {
      get { return nodeDataList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNodeDataOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNodeDataOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodeDataList_.Equals(other.nodeDataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodeDataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodeDataList_.WriteTo(output, _repeated_nodeDataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodeDataList_.CalculateSize(_repeated_nodeDataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNodeDataOutput other) {
      if (other == null) {
        return;
      }
      nodeDataList_.Add(other.nodeDataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            nodeDataList_.AddEntriesFrom(input, _repeated_nodeDataList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// GetNodeDataStream messages
  /// </summary>
  public sealed partial class GetNodeDataStreamInput : pb::IMessage<GetNodeDataStreamInput> {
    private static readonly pb::MessageParser<GetNodeDataStreamInput> _parser = new pb::MessageParser<GetNodeDataStreamInput>(() => new GetNodeDataStreamInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNodeDataStreamInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeDataStreamInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeDataStreamInput(GetNodeDataStreamInput other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeDataStreamInput Clone() {
      return new GetNodeDataStreamInput(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNodeDataStreamInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNodeDataStreamInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNodeDataStreamInput other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GetNodeDataStreamOutput : pb::IMessage<GetNodeDataStreamOutput> {
    private static readonly pb::MessageParser<GetNodeDataStreamOutput> _parser = new pb::MessageParser<GetNodeDataStreamOutput>(() => new GetNodeDataStreamOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNodeDataStreamOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeDataStreamOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeDataStreamOutput(GetNodeDataStreamOutput other) : this() {
      nodeId_ = other.nodeId_;
      NodeData = other.nodeData_ != null ? other.NodeData.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeDataStreamOutput Clone() {
      return new GetNodeDataStreamOutput(this);
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private string nodeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_data" field.</summary>
    public const int NodeDataFieldNumber = 2;
    private global::SKF.Enlight.API.IoT.NodeData nodeData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.IoT.NodeData NodeData {
      get { return nodeData_; }
      set {
        nodeData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNodeDataStreamOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNodeDataStreamOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (!object.Equals(NodeData, other.NodeData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId.Length != 0) hash ^= NodeId.GetHashCode();
      if (nodeData_ != null) hash ^= NodeData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeId);
      }
      if (nodeData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NodeData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeId);
      }
      if (nodeData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNodeDataStreamOutput other) {
      if (other == null) {
        return;
      }
      if (other.NodeId.Length != 0) {
        NodeId = other.NodeId;
      }
      if (other.nodeData_ != null) {
        if (nodeData_ == null) {
          nodeData_ = new global::SKF.Enlight.API.IoT.NodeData();
        }
        NodeData.MergeFrom(other.NodeData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeId = input.ReadString();
            break;
          }
          case 18: {
            if (nodeData_ == null) {
              nodeData_ = new global::SKF.Enlight.API.IoT.NodeData();
            }
            input.ReadMessage(nodeData_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTaskStreamInput : pb::IMessage<GetTaskStreamInput> {
    private static readonly pb::MessageParser<GetTaskStreamInput> _parser = new pb::MessageParser<GetTaskStreamInput>(() => new GetTaskStreamInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTaskStreamInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTaskStreamInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTaskStreamInput(GetTaskStreamInput other) : this() {
      hierarchyId_ = other.hierarchyId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTaskStreamInput Clone() {
      return new GetTaskStreamInput(this);
    }

    /// <summary>Field number for the "hierarchy_id" field.</summary>
    public const int HierarchyIdFieldNumber = 1;
    private string hierarchyId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HierarchyId {
      get { return hierarchyId_; }
      set {
        hierarchyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTaskStreamInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTaskStreamInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HierarchyId != other.HierarchyId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HierarchyId.Length != 0) hash ^= HierarchyId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HierarchyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HierarchyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HierarchyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HierarchyId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTaskStreamInput other) {
      if (other == null) {
        return;
      }
      if (other.HierarchyId.Length != 0) {
        HierarchyId = other.HierarchyId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            HierarchyId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTaskStreamOutput : pb::IMessage<GetTaskStreamOutput> {
    private static readonly pb::MessageParser<GetTaskStreamOutput> _parser = new pb::MessageParser<GetTaskStreamOutput>(() => new GetTaskStreamOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTaskStreamOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.IoT.IoTReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTaskStreamOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTaskStreamOutput(GetTaskStreamOutput other) : this() {
      Task = other.task_ != null ? other.Task.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTaskStreamOutput Clone() {
      return new GetTaskStreamOutput(this);
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 1;
    private global::SKF.Enlight.API.IoT.TaskDescription task_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.IoT.TaskDescription Task {
      get { return task_; }
      set {
        task_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTaskStreamOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTaskStreamOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Task, other.Task)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (task_ != null) hash ^= Task.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (task_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Task);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (task_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTaskStreamOutput other) {
      if (other == null) {
        return;
      }
      if (other.task_ != null) {
        if (task_ == null) {
          task_ = new global::SKF.Enlight.API.IoT.TaskDescription();
        }
        Task.MergeFrom(other.Task);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (task_ == null) {
              task_ = new global::SKF.Enlight.API.IoT.TaskDescription();
            }
            input.ReadMessage(task_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
