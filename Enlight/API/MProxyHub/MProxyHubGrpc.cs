// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MProxyHub.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SKF.Enlight.API.MProxyHub {
  public static partial class MicrologProxyHub
  {
    static readonly string __ServiceName = "mhubapi.MicrologProxyHub";

    static readonly grpc::Marshaller<global::SKF.Enlight.API.MProxyHub.Void> __Marshaller_Void = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.MProxyHub.Void.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.MProxyHub.DeepPingOutput> __Marshaller_DeepPingOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.MProxyHub.DeepPingOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.MProxyHub.SetTaskStatusInput> __Marshaller_SetTaskStatusInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.MProxyHub.SetTaskStatusInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.MProxyHub.AvailableDSKFStreamInput> __Marshaller_AvailableDSKFStreamInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.MProxyHub.AvailableDSKFStreamInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.MProxyHub.AvailableDSKFStreamOutput> __Marshaller_AvailableDSKFStreamOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.MProxyHub.AvailableDSKFStreamOutput.Parser.ParseFrom);

    static readonly grpc::Method<global::SKF.Enlight.API.MProxyHub.Void, global::SKF.Enlight.API.MProxyHub.DeepPingOutput> __Method_DeepPing = new grpc::Method<global::SKF.Enlight.API.MProxyHub.Void, global::SKF.Enlight.API.MProxyHub.DeepPingOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeepPing",
        __Marshaller_Void,
        __Marshaller_DeepPingOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.MProxyHub.SetTaskStatusInput, global::SKF.Enlight.API.MProxyHub.Void> __Method_SetTaskStatus = new grpc::Method<global::SKF.Enlight.API.MProxyHub.SetTaskStatusInput, global::SKF.Enlight.API.MProxyHub.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetTaskStatus",
        __Marshaller_SetTaskStatusInput,
        __Marshaller_Void);

    static readonly grpc::Method<global::SKF.Enlight.API.MProxyHub.AvailableDSKFStreamInput, global::SKF.Enlight.API.MProxyHub.AvailableDSKFStreamOutput> __Method_AvailableDSKFStream = new grpc::Method<global::SKF.Enlight.API.MProxyHub.AvailableDSKFStreamInput, global::SKF.Enlight.API.MProxyHub.AvailableDSKFStreamOutput>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "AvailableDSKFStream",
        __Marshaller_AvailableDSKFStreamInput,
        __Marshaller_AvailableDSKFStreamOutput);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SKF.Enlight.API.MProxyHub.MProxyHubReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MicrologProxyHub</summary>
    public abstract partial class MicrologProxyHubBase
    {
      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.MProxyHub.DeepPingOutput> DeepPing(global::SKF.Enlight.API.MProxyHub.Void request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.MProxyHub.Void> SetTaskStatus(global::SKF.Enlight.API.MProxyHub.SetTaskStatusInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task AvailableDSKFStream(global::SKF.Enlight.API.MProxyHub.AvailableDSKFStreamInput request, grpc::IServerStreamWriter<global::SKF.Enlight.API.MProxyHub.AvailableDSKFStreamOutput> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MicrologProxyHub</summary>
    public partial class MicrologProxyHubClient : grpc::ClientBase<MicrologProxyHubClient>
    {
      /// <summary>Creates a new client for MicrologProxyHub</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MicrologProxyHubClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MicrologProxyHub that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MicrologProxyHubClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MicrologProxyHubClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MicrologProxyHubClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::SKF.Enlight.API.MProxyHub.DeepPingOutput DeepPing(global::SKF.Enlight.API.MProxyHub.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeepPing(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.MProxyHub.DeepPingOutput DeepPing(global::SKF.Enlight.API.MProxyHub.Void request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeepPing, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.MProxyHub.DeepPingOutput> DeepPingAsync(global::SKF.Enlight.API.MProxyHub.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeepPingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.MProxyHub.DeepPingOutput> DeepPingAsync(global::SKF.Enlight.API.MProxyHub.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeepPing, null, options, request);
      }
      public virtual global::SKF.Enlight.API.MProxyHub.Void SetTaskStatus(global::SKF.Enlight.API.MProxyHub.SetTaskStatusInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTaskStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.MProxyHub.Void SetTaskStatus(global::SKF.Enlight.API.MProxyHub.SetTaskStatusInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetTaskStatus, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.MProxyHub.Void> SetTaskStatusAsync(global::SKF.Enlight.API.MProxyHub.SetTaskStatusInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTaskStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.MProxyHub.Void> SetTaskStatusAsync(global::SKF.Enlight.API.MProxyHub.SetTaskStatusInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetTaskStatus, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::SKF.Enlight.API.MProxyHub.AvailableDSKFStreamOutput> AvailableDSKFStream(global::SKF.Enlight.API.MProxyHub.AvailableDSKFStreamInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AvailableDSKFStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::SKF.Enlight.API.MProxyHub.AvailableDSKFStreamOutput> AvailableDSKFStream(global::SKF.Enlight.API.MProxyHub.AvailableDSKFStreamInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_AvailableDSKFStream, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MicrologProxyHubClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MicrologProxyHubClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MicrologProxyHubBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DeepPing, serviceImpl.DeepPing)
          .AddMethod(__Method_SetTaskStatus, serviceImpl.SetTaskStatus)
          .AddMethod(__Method_AvailableDSKFStream, serviceImpl.AvailableDSKFStream).Build();
    }

  }
}
#endregion
