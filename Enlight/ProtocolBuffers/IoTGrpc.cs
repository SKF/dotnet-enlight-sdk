// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: IoT.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SKF.Enlight.ProtocolBuffers {
  public static partial class IoT
  {
    static readonly string __ServiceName = "iotgrpcapi.IoT";

    static readonly grpc::Marshaller<global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid> __Marshaller_PrimitiveVoid = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.ProtocolBuffers.PrimitiveString> __Marshaller_PrimitiveString = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.ProtocolBuffers.PrimitiveString.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.ProtocolBuffers.InitialTaskDescription> __Marshaller_InitialTaskDescription = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.ProtocolBuffers.InitialTaskDescription.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.ProtocolBuffers.TaskDescriptions> __Marshaller_TaskDescriptions = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.ProtocolBuffers.TaskDescriptions.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.ProtocolBuffers.TaskUser> __Marshaller_TaskUser = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.ProtocolBuffers.TaskUser.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.ProtocolBuffers.SetTaskStatusInput> __Marshaller_SetTaskStatusInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.ProtocolBuffers.SetTaskStatusInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.ProtocolBuffers.GetTaskStreamInput> __Marshaller_GetTaskStreamInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.ProtocolBuffers.GetTaskStreamInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.ProtocolBuffers.GetTaskStreamOutput> __Marshaller_GetTaskStreamOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.ProtocolBuffers.GetTaskStreamOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.ProtocolBuffers.IngestNodeDataInput> __Marshaller_IngestNodeDataInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.ProtocolBuffers.IngestNodeDataInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.ProtocolBuffers.IngestNodeDataOutput> __Marshaller_IngestNodeDataOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.ProtocolBuffers.IngestNodeDataOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.ProtocolBuffers.IngestNodeDataStreamInput> __Marshaller_IngestNodeDataStreamInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.ProtocolBuffers.IngestNodeDataStreamInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.ProtocolBuffers.IngestNodeDataStreamOutput> __Marshaller_IngestNodeDataStreamOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.ProtocolBuffers.IngestNodeDataStreamOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.ProtocolBuffers.GetNodeDataInput> __Marshaller_GetNodeDataInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.ProtocolBuffers.GetNodeDataInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.ProtocolBuffers.GetNodeDataOutput> __Marshaller_GetNodeDataOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.ProtocolBuffers.GetNodeDataOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.ProtocolBuffers.GetNodeDataStreamInput> __Marshaller_GetNodeDataStreamInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.ProtocolBuffers.GetNodeDataStreamInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.ProtocolBuffers.GetNodeDataStreamOutput> __Marshaller_GetNodeDataStreamOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.ProtocolBuffers.GetNodeDataStreamOutput.Parser.ParseFrom);

    static readonly grpc::Method<global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid, global::SKF.Enlight.ProtocolBuffers.PrimitiveString> __Method_DeepPing = new grpc::Method<global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid, global::SKF.Enlight.ProtocolBuffers.PrimitiveString>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeepPing",
        __Marshaller_PrimitiveVoid,
        __Marshaller_PrimitiveString);

    static readonly grpc::Method<global::SKF.Enlight.ProtocolBuffers.InitialTaskDescription, global::SKF.Enlight.ProtocolBuffers.PrimitiveString> __Method_CreateTask = new grpc::Method<global::SKF.Enlight.ProtocolBuffers.InitialTaskDescription, global::SKF.Enlight.ProtocolBuffers.PrimitiveString>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTask",
        __Marshaller_InitialTaskDescription,
        __Marshaller_PrimitiveString);

    static readonly grpc::Method<global::SKF.Enlight.ProtocolBuffers.PrimitiveString, global::SKF.Enlight.ProtocolBuffers.TaskDescriptions> __Method_GetAllTasks = new grpc::Method<global::SKF.Enlight.ProtocolBuffers.PrimitiveString, global::SKF.Enlight.ProtocolBuffers.TaskDescriptions>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllTasks",
        __Marshaller_PrimitiveString,
        __Marshaller_TaskDescriptions);

    static readonly grpc::Method<global::SKF.Enlight.ProtocolBuffers.PrimitiveString, global::SKF.Enlight.ProtocolBuffers.TaskDescriptions> __Method_GetUncompletedTasks = new grpc::Method<global::SKF.Enlight.ProtocolBuffers.PrimitiveString, global::SKF.Enlight.ProtocolBuffers.TaskDescriptions>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUncompletedTasks",
        __Marshaller_PrimitiveString,
        __Marshaller_TaskDescriptions);

    static readonly grpc::Method<global::SKF.Enlight.ProtocolBuffers.TaskUser, global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid> __Method_SetTaskCompleted = new grpc::Method<global::SKF.Enlight.ProtocolBuffers.TaskUser, global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetTaskCompleted",
        __Marshaller_TaskUser,
        __Marshaller_PrimitiveVoid);

    static readonly grpc::Method<global::SKF.Enlight.ProtocolBuffers.TaskUser, global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid> __Method_DeleteTask = new grpc::Method<global::SKF.Enlight.ProtocolBuffers.TaskUser, global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTask",
        __Marshaller_TaskUser,
        __Marshaller_PrimitiveVoid);

    static readonly grpc::Method<global::SKF.Enlight.ProtocolBuffers.PrimitiveString, global::SKF.Enlight.ProtocolBuffers.TaskDescriptions> __Method_GetUncompletedTasksByHierarchy = new grpc::Method<global::SKF.Enlight.ProtocolBuffers.PrimitiveString, global::SKF.Enlight.ProtocolBuffers.TaskDescriptions>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUncompletedTasksByHierarchy",
        __Marshaller_PrimitiveString,
        __Marshaller_TaskDescriptions);

    static readonly grpc::Method<global::SKF.Enlight.ProtocolBuffers.SetTaskStatusInput, global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid> __Method_SetTaskStatus = new grpc::Method<global::SKF.Enlight.ProtocolBuffers.SetTaskStatusInput, global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetTaskStatus",
        __Marshaller_SetTaskStatusInput,
        __Marshaller_PrimitiveVoid);

    static readonly grpc::Method<global::SKF.Enlight.ProtocolBuffers.GetTaskStreamInput, global::SKF.Enlight.ProtocolBuffers.GetTaskStreamOutput> __Method_GetTaskStream = new grpc::Method<global::SKF.Enlight.ProtocolBuffers.GetTaskStreamInput, global::SKF.Enlight.ProtocolBuffers.GetTaskStreamOutput>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetTaskStream",
        __Marshaller_GetTaskStreamInput,
        __Marshaller_GetTaskStreamOutput);

    static readonly grpc::Method<global::SKF.Enlight.ProtocolBuffers.IngestNodeDataInput, global::SKF.Enlight.ProtocolBuffers.IngestNodeDataOutput> __Method_IngestNodeData = new grpc::Method<global::SKF.Enlight.ProtocolBuffers.IngestNodeDataInput, global::SKF.Enlight.ProtocolBuffers.IngestNodeDataOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IngestNodeData",
        __Marshaller_IngestNodeDataInput,
        __Marshaller_IngestNodeDataOutput);

    static readonly grpc::Method<global::SKF.Enlight.ProtocolBuffers.IngestNodeDataStreamInput, global::SKF.Enlight.ProtocolBuffers.IngestNodeDataStreamOutput> __Method_IngestNodeDataStream = new grpc::Method<global::SKF.Enlight.ProtocolBuffers.IngestNodeDataStreamInput, global::SKF.Enlight.ProtocolBuffers.IngestNodeDataStreamOutput>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "IngestNodeDataStream",
        __Marshaller_IngestNodeDataStreamInput,
        __Marshaller_IngestNodeDataStreamOutput);

    static readonly grpc::Method<global::SKF.Enlight.ProtocolBuffers.GetNodeDataInput, global::SKF.Enlight.ProtocolBuffers.GetNodeDataOutput> __Method_GetNodeData = new grpc::Method<global::SKF.Enlight.ProtocolBuffers.GetNodeDataInput, global::SKF.Enlight.ProtocolBuffers.GetNodeDataOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNodeData",
        __Marshaller_GetNodeDataInput,
        __Marshaller_GetNodeDataOutput);

    static readonly grpc::Method<global::SKF.Enlight.ProtocolBuffers.GetNodeDataStreamInput, global::SKF.Enlight.ProtocolBuffers.GetNodeDataStreamOutput> __Method_GetNodeDataStream = new grpc::Method<global::SKF.Enlight.ProtocolBuffers.GetNodeDataStreamInput, global::SKF.Enlight.ProtocolBuffers.GetNodeDataStreamOutput>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetNodeDataStream",
        __Marshaller_GetNodeDataStreamInput,
        __Marshaller_GetNodeDataStreamOutput);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SKF.Enlight.ProtocolBuffers.IoTReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of IoT</summary>
    public abstract partial class IoTBase
    {
      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.ProtocolBuffers.PrimitiveString> DeepPing(global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.ProtocolBuffers.PrimitiveString> CreateTask(global::SKF.Enlight.ProtocolBuffers.InitialTaskDescription request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.ProtocolBuffers.TaskDescriptions> GetAllTasks(global::SKF.Enlight.ProtocolBuffers.PrimitiveString request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.ProtocolBuffers.TaskDescriptions> GetUncompletedTasks(global::SKF.Enlight.ProtocolBuffers.PrimitiveString request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid> SetTaskCompleted(global::SKF.Enlight.ProtocolBuffers.TaskUser request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid> DeleteTask(global::SKF.Enlight.ProtocolBuffers.TaskUser request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.ProtocolBuffers.TaskDescriptions> GetUncompletedTasksByHierarchy(global::SKF.Enlight.ProtocolBuffers.PrimitiveString request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid> SetTaskStatus(global::SKF.Enlight.ProtocolBuffers.SetTaskStatusInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetTaskStream(global::SKF.Enlight.ProtocolBuffers.GetTaskStreamInput request, grpc::IServerStreamWriter<global::SKF.Enlight.ProtocolBuffers.GetTaskStreamOutput> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.ProtocolBuffers.IngestNodeDataOutput> IngestNodeData(global::SKF.Enlight.ProtocolBuffers.IngestNodeDataInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.ProtocolBuffers.IngestNodeDataStreamOutput> IngestNodeDataStream(grpc::IAsyncStreamReader<global::SKF.Enlight.ProtocolBuffers.IngestNodeDataStreamInput> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.ProtocolBuffers.GetNodeDataOutput> GetNodeData(global::SKF.Enlight.ProtocolBuffers.GetNodeDataInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetNodeDataStream(global::SKF.Enlight.ProtocolBuffers.GetNodeDataStreamInput request, grpc::IServerStreamWriter<global::SKF.Enlight.ProtocolBuffers.GetNodeDataStreamOutput> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for IoT</summary>
    public partial class IoTClient : grpc::ClientBase<IoTClient>
    {
      /// <summary>Creates a new client for IoT</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public IoTClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for IoT that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public IoTClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected IoTClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected IoTClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::SKF.Enlight.ProtocolBuffers.PrimitiveString DeepPing(global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeepPing(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.ProtocolBuffers.PrimitiveString DeepPing(global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeepPing, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.PrimitiveString> DeepPingAsync(global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeepPingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.PrimitiveString> DeepPingAsync(global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeepPing, null, options, request);
      }
      public virtual global::SKF.Enlight.ProtocolBuffers.PrimitiveString CreateTask(global::SKF.Enlight.ProtocolBuffers.InitialTaskDescription request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.ProtocolBuffers.PrimitiveString CreateTask(global::SKF.Enlight.ProtocolBuffers.InitialTaskDescription request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTask, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.PrimitiveString> CreateTaskAsync(global::SKF.Enlight.ProtocolBuffers.InitialTaskDescription request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.PrimitiveString> CreateTaskAsync(global::SKF.Enlight.ProtocolBuffers.InitialTaskDescription request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTask, null, options, request);
      }
      public virtual global::SKF.Enlight.ProtocolBuffers.TaskDescriptions GetAllTasks(global::SKF.Enlight.ProtocolBuffers.PrimitiveString request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.ProtocolBuffers.TaskDescriptions GetAllTasks(global::SKF.Enlight.ProtocolBuffers.PrimitiveString request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllTasks, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.TaskDescriptions> GetAllTasksAsync(global::SKF.Enlight.ProtocolBuffers.PrimitiveString request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.TaskDescriptions> GetAllTasksAsync(global::SKF.Enlight.ProtocolBuffers.PrimitiveString request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllTasks, null, options, request);
      }
      public virtual global::SKF.Enlight.ProtocolBuffers.TaskDescriptions GetUncompletedTasks(global::SKF.Enlight.ProtocolBuffers.PrimitiveString request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUncompletedTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.ProtocolBuffers.TaskDescriptions GetUncompletedTasks(global::SKF.Enlight.ProtocolBuffers.PrimitiveString request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUncompletedTasks, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.TaskDescriptions> GetUncompletedTasksAsync(global::SKF.Enlight.ProtocolBuffers.PrimitiveString request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUncompletedTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.TaskDescriptions> GetUncompletedTasksAsync(global::SKF.Enlight.ProtocolBuffers.PrimitiveString request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUncompletedTasks, null, options, request);
      }
      public virtual global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid SetTaskCompleted(global::SKF.Enlight.ProtocolBuffers.TaskUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTaskCompleted(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid SetTaskCompleted(global::SKF.Enlight.ProtocolBuffers.TaskUser request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetTaskCompleted, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid> SetTaskCompletedAsync(global::SKF.Enlight.ProtocolBuffers.TaskUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTaskCompletedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid> SetTaskCompletedAsync(global::SKF.Enlight.ProtocolBuffers.TaskUser request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetTaskCompleted, null, options, request);
      }
      public virtual global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid DeleteTask(global::SKF.Enlight.ProtocolBuffers.TaskUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid DeleteTask(global::SKF.Enlight.ProtocolBuffers.TaskUser request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTask, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid> DeleteTaskAsync(global::SKF.Enlight.ProtocolBuffers.TaskUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid> DeleteTaskAsync(global::SKF.Enlight.ProtocolBuffers.TaskUser request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTask, null, options, request);
      }
      public virtual global::SKF.Enlight.ProtocolBuffers.TaskDescriptions GetUncompletedTasksByHierarchy(global::SKF.Enlight.ProtocolBuffers.PrimitiveString request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUncompletedTasksByHierarchy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.ProtocolBuffers.TaskDescriptions GetUncompletedTasksByHierarchy(global::SKF.Enlight.ProtocolBuffers.PrimitiveString request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUncompletedTasksByHierarchy, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.TaskDescriptions> GetUncompletedTasksByHierarchyAsync(global::SKF.Enlight.ProtocolBuffers.PrimitiveString request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUncompletedTasksByHierarchyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.TaskDescriptions> GetUncompletedTasksByHierarchyAsync(global::SKF.Enlight.ProtocolBuffers.PrimitiveString request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUncompletedTasksByHierarchy, null, options, request);
      }
      public virtual global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid SetTaskStatus(global::SKF.Enlight.ProtocolBuffers.SetTaskStatusInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTaskStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid SetTaskStatus(global::SKF.Enlight.ProtocolBuffers.SetTaskStatusInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetTaskStatus, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid> SetTaskStatusAsync(global::SKF.Enlight.ProtocolBuffers.SetTaskStatusInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTaskStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.PrimitiveVoid> SetTaskStatusAsync(global::SKF.Enlight.ProtocolBuffers.SetTaskStatusInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetTaskStatus, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::SKF.Enlight.ProtocolBuffers.GetTaskStreamOutput> GetTaskStream(global::SKF.Enlight.ProtocolBuffers.GetTaskStreamInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::SKF.Enlight.ProtocolBuffers.GetTaskStreamOutput> GetTaskStream(global::SKF.Enlight.ProtocolBuffers.GetTaskStreamInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetTaskStream, null, options, request);
      }
      public virtual global::SKF.Enlight.ProtocolBuffers.IngestNodeDataOutput IngestNodeData(global::SKF.Enlight.ProtocolBuffers.IngestNodeDataInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IngestNodeData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.ProtocolBuffers.IngestNodeDataOutput IngestNodeData(global::SKF.Enlight.ProtocolBuffers.IngestNodeDataInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IngestNodeData, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.IngestNodeDataOutput> IngestNodeDataAsync(global::SKF.Enlight.ProtocolBuffers.IngestNodeDataInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IngestNodeDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.IngestNodeDataOutput> IngestNodeDataAsync(global::SKF.Enlight.ProtocolBuffers.IngestNodeDataInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IngestNodeData, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::SKF.Enlight.ProtocolBuffers.IngestNodeDataStreamInput, global::SKF.Enlight.ProtocolBuffers.IngestNodeDataStreamOutput> IngestNodeDataStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IngestNodeDataStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::SKF.Enlight.ProtocolBuffers.IngestNodeDataStreamInput, global::SKF.Enlight.ProtocolBuffers.IngestNodeDataStreamOutput> IngestNodeDataStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_IngestNodeDataStream, null, options);
      }
      public virtual global::SKF.Enlight.ProtocolBuffers.GetNodeDataOutput GetNodeData(global::SKF.Enlight.ProtocolBuffers.GetNodeDataInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodeData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.ProtocolBuffers.GetNodeDataOutput GetNodeData(global::SKF.Enlight.ProtocolBuffers.GetNodeDataInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNodeData, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.GetNodeDataOutput> GetNodeDataAsync(global::SKF.Enlight.ProtocolBuffers.GetNodeDataInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodeDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.ProtocolBuffers.GetNodeDataOutput> GetNodeDataAsync(global::SKF.Enlight.ProtocolBuffers.GetNodeDataInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNodeData, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::SKF.Enlight.ProtocolBuffers.GetNodeDataStreamOutput> GetNodeDataStream(global::SKF.Enlight.ProtocolBuffers.GetNodeDataStreamInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodeDataStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::SKF.Enlight.ProtocolBuffers.GetNodeDataStreamOutput> GetNodeDataStream(global::SKF.Enlight.ProtocolBuffers.GetNodeDataStreamInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetNodeDataStream, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override IoTClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new IoTClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(IoTBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DeepPing, serviceImpl.DeepPing)
          .AddMethod(__Method_CreateTask, serviceImpl.CreateTask)
          .AddMethod(__Method_GetAllTasks, serviceImpl.GetAllTasks)
          .AddMethod(__Method_GetUncompletedTasks, serviceImpl.GetUncompletedTasks)
          .AddMethod(__Method_SetTaskCompleted, serviceImpl.SetTaskCompleted)
          .AddMethod(__Method_DeleteTask, serviceImpl.DeleteTask)
          .AddMethod(__Method_GetUncompletedTasksByHierarchy, serviceImpl.GetUncompletedTasksByHierarchy)
          .AddMethod(__Method_SetTaskStatus, serviceImpl.SetTaskStatus)
          .AddMethod(__Method_GetTaskStream, serviceImpl.GetTaskStream)
          .AddMethod(__Method_IngestNodeData, serviceImpl.IngestNodeData)
          .AddMethod(__Method_IngestNodeDataStream, serviceImpl.IngestNodeDataStream)
          .AddMethod(__Method_GetNodeData, serviceImpl.GetNodeData)
          .AddMethod(__Method_GetNodeDataStream, serviceImpl.GetNodeDataStream).Build();
    }

  }
}
#endregion
